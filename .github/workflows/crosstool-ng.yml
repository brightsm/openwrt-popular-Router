name: Compile cross-ng 1.26
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
env:
  #REPO_URL: https://githubfast.com/bwnqx/immortalwrt-mt798x
  REPO_URL: https://github.com/crosstool-ng/crosstool-ng
  REPO_BRANCH: master  
  CONFIG_FILE: imx280a_cross_toolchain.config
  DIY_P1_SH: install_build_package.sh  
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@main
      
    - name: Clone source code     
      run: |
          mkdir output
          echo "Clone source code" >> $GITHUB_WORKSPACE/output/shellcommand.log
          echo "get first enter github actiong system path:" >> $GITHUB_WORKSPACE/output/shellcommand.log
          pwd >> $GITHUB_WORKSPACE/output/shellcommand.log
          echo "get filelist:" >> $GITHUB_WORKSPACE/output/shellcommand.log
          ls -l >> $GITHUB_WORKSPACE/output/shellcommand.log
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH crosstool-ng
          ln -sf /workdir/crosstool-ng $GITHUB_WORKSPACE/crosstool-ng
      
    - name: Set up build environment
      run: |	  
          cp $GITHUB_WORKSPACE/install_build_package.sh $GITHUB_WORKSPACE/crosstool-ng/
          
    - name: Compile crosstool-ng
      run: |	  
          cd $GITHUB_WORKSPACE/
          echo "Compile crosstool-ng" >> $GITHUB_WORKSPACE/output/shellcommand.log
          pwd >> $GITHUB_WORKSPACE/output/shellcommand.log
          echo "get filelist:" >> $GITHUB_WORKSPACE/output/shellcommand.log
          ls -l >> $GITHUB_WORKSPACE/output/shellcommand.log
          cd $GITHUB_WORKSPACE/crosstool-ng/
          chmod +x install_build_package.sh
          ./install_build_package.sh
          ./bootstrap
          ./configure
          make
          sudo make install
          ct-ng -v >$GITHUB_WORKSPACE/output/CompileResult.log
          
          
    - name: Compile imx280a_cross_toolchain
      run: |
          cd $GITHUB_WORKSPACE/
          mkdir binfile
          mkdir armv5te-arm926ejs-build          
          cp $GITHUB_WORKSPACE/imx280a_cross_toolchain.config  $GITHUB_WORKSPACE/armv5te-arm926ejs-build/.config 
          cd  $GITHUB_WORKSPACE/armv5te-arm926ejs-build
          ct-ng build
          #./arm-926ejs-linux-gnueabi/bin/arm-926ejs-linux-gnueabi-gcc --version > "cross_toolchain_version.log" 2>&1 
          #cp cross_toolchain_version.log  $GITHUB_WORKSPACE/
          #cd $GITHUB_WORKSPACE/
          #echo "FIRMWARE=$PWD" >> $GITHUB_ENV        
          #echo "{status}={success}" >> $GITHUB_OUTPUT
          tar -czf g++_include.tar.gz x-tools/arm-926ejs-linux-gnueabi/arm-926ejs-linux-gnueabi/include/
          mv g++_include.tar.gz $GITHUB_WORKSPACE/binfile/g++_include.tar.gz
          
    - name: Compile elftosb tool
      run: |
          cd $GITHUB_WORKSPACE/
          git clone https://github.com/brightsm/elftosb
          cd ./elftosb
          make
          
    - name: Compile u-boot
      run: |
          cd $GITHUB_WORKSPACE/
          wget https://ftp.denx.de/pub/u-boot/u-boot-2020.07-rc4.tar.bz2
          tar -xf u-boot-2020.07-rc4.tar.bz2          
          cp -f ./imx280a_resource/ubootForImx280a/* u-boot-2020.07-rc4
          cd u-boot-2020.07-rc4
          patch -p1 < 0001-u-boot-2020.07-rc4_port_for_easyarm_imx280a.patch
          chmod +x build_auto.sh
          ./build_auto.sh
    - name: orgnize u-boot file
      run: |
          cd $GITHUB_WORKSPACE/u-boot-2020.07-rc4
          mkdir imx-uboot-bin
          cp u-boot.sb ./imx-uboot-bin
          cp u-boot ./imx-uboot-bin
          tar -czf imx280a-ubootbin.tar.gz imx-uboot-bin
          cp imx280a-ubootbin.tar.gz $GITHUB_WORKSPACE/binfile
          

    - name: copy elftosb tool
      run: |
          cd $GITHUB_WORKSPACE/elftosb
          mkdir elftosb_bin
          cp ./bld/linux/elftosb ./elftosb_bin
          cp ./bld/linux/keygen ./elftosb_bin
          cp ./bld/linux/sbtool ./elftosb_bin
          tar -czf elftosb_bin.tar.gz elftosb_bin
          cp elftosb_bin.tar.gz $GITHUB_WORKSPACE/binfile
          
    - name: compress bin file
      run: |          
          cd $GITHUB_WORKSPACE/
          tar -czf binfile.tar.gz binfile
          mv binfile.tar.gz ./output/binfile.tar.gz
          
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Upload bin directory
      uses: actions/upload-artifact@main
# “UPLOAD_BIN_DIR”在最前面
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: imx280a_toolchain_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path:  $GITHUB_WORKSPACE/output

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
          cd $GITHUB_WORKSPACE/output
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV        
          echo "{status}={success}" >> $GITHUB_OUTPUT
          echo "::set-output name=status::success"

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          echo "::set-output name=status::success"	   

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}		
